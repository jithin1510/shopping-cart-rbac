{
  "openapi": "3.0.0",
  "info": {
    "title": "E-commerce API with RBAC",
    "description": "API documentation for E-commerce application with Role-Based Access Control (RBAC)",
    "version": "1.0.0",
    "contact": {
      "email": "support@mernshop.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8000",
      "description": "Development server"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication operations"
    },
    {
      "name": "Users",
      "description": "User management operations"
    },
    {
      "name": "Products",
      "description": "Product management operations"
    },
    {
      "name": "Categories",
      "description": "Category management operations"
    },
    {
      "name": "Brands",
      "description": "Brand management operations"
    },
    {
      "name": "Cart",
      "description": "Shopping cart operations"
    },
    {
      "name": "Orders",
      "description": "Order management operations"
    },
    {
      "name": "Wishlist",
      "description": "Wishlist operations"
    },
    {
      "name": "Reviews",
      "description": "Product review operations"
    },
    {
      "name": "Address",
      "description": "User address operations"
    }
  ],
  "components": {
    "securitySchemes": {
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "token"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the user"
          },
          "name": {
            "type": "string",
            "description": "User's full name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "isVerified": {
            "type": "boolean",
            "description": "Whether the user's email is verified"
          },
          "role": {
            "type": "string",
            "enum": [
              "customer",
              "vendor",
              "admin"
            ],
            "description": "User's role in the system"
          },
          "isApproved": {
            "type": "boolean",
            "description": "Whether the vendor is approved by admin (always true for customers)"
          },
          "isAdmin": {
            "type": "boolean",
            "description": "Legacy field indicating admin status"
          }
        },
        "required": [
          "name",
          "email"
        ]
      },
      "Product": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the product"
          },
          "title": {
            "type": "string",
            "description": "Product title"
          },
          "description": {
            "type": "string",
            "description": "Product description"
          },
          "price": {
            "type": "number",
            "description": "Product price"
          },
          "discountPercentage": {
            "type": "number",
            "description": "Discount percentage"
          },
          "category": {
            "type": "string",
            "description": "Category ID reference"
          },
          "brand": {
            "type": "string",
            "description": "Brand ID reference"
          },
          "stockQuantity": {
            "type": "integer",
            "description": "Available stock quantity"
          },
          "thumbnail": {
            "type": "string",
            "description": "URL to product thumbnail image"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "URLs to product images"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Whether the product is soft-deleted"
          },
          "vendor": {
            "type": "string",
            "description": "Vendor ID reference"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Product creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Product last update timestamp"
          }
        },
        "required": [
          "title",
          "description",
          "price",
          "category",
          "brand",
          "stockQuantity",
          "thumbnail",
          "images",
          "vendor"
        ]
      },
      "Category": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the category"
          },
          "name": {
            "type": "string",
            "description": "Category name"
          }
        },
        "required": [
          "name"
        ]
      },
      "Brand": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the brand"
          },
          "name": {
            "type": "string",
            "description": "Brand name"
          }
        },
        "required": [
          "name"
        ]
      },
      "Cart": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the cart"
          },
          "user": {
            "type": "string",
            "description": "User ID reference"
          },
          "products": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "product": {
                  "type": "string",
                  "description": "Product ID reference"
                },
                "quantity": {
                  "type": "integer",
                  "description": "Quantity of the product"
                }
              }
            },
            "description": "Products in the cart"
          }
        },
        "required": [
          "user",
          "products"
        ]
      },
      "Order": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the order"
          },
          "user": {
            "type": "string",
            "description": "User ID reference"
          },
          "products": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "product": {
                  "type": "string",
                  "description": "Product ID reference"
                },
                "quantity": {
                  "type": "integer",
                  "description": "Quantity of the product"
                },
                "price": {
                  "type": "number",
                  "description": "Price at the time of order"
                }
              }
            },
            "description": "Products in the order"
          },
          "totalAmount": {
            "type": "number",
            "description": "Total order amount"
          },
          "shippingAddress": {
            "type": "string",
            "description": "Address ID reference"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "processing",
              "shipped",
              "delivered",
              "cancelled"
            ],
            "description": "Order status"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Order creation timestamp"
          }
        },
        "required": [
          "user",
          "products",
          "totalAmount",
          "shippingAddress"
        ]
      },
      "Wishlist": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the wishlist"
          },
          "user": {
            "type": "string",
            "description": "User ID reference"
          },
          "products": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Product ID reference"
            },
            "description": "Products in the wishlist"
          }
        },
        "required": [
          "user",
          "products"
        ]
      },
      "Review": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the review"
          },
          "user": {
            "type": "string",
            "description": "User ID reference"
          },
          "product": {
            "type": "string",
            "description": "Product ID reference"
          },
          "rating": {
            "type": "integer",
            "minimum": 1,
            "maximum": 5,
            "description": "Rating from 1 to 5"
          },
          "comment": {
            "type": "string",
            "description": "Review comment"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Review creation timestamp"
          }
        },
        "required": [
          "user",
          "product",
          "rating"
        ]
      },
      "Address": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the address"
          },
          "user": {
            "type": "string",
            "description": "User ID reference"
          },
          "name": {
            "type": "string",
            "description": "Recipient name"
          },
          "street": {
            "type": "string",
            "description": "Street address"
          },
          "city": {
            "type": "string",
            "description": "City"
          },
          "state": {
            "type": "string",
            "description": "State/Province"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal/ZIP code"
          },
          "country": {
            "type": "string",
            "description": "Country"
          },
          "phone": {
            "type": "string",
            "description": "Contact phone number"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Whether this is the default address"
          }
        },
        "required": [
          "user",
          "name",
          "street",
          "city",
          "state",
          "postalCode",
          "country",
          "phone"
        ]
      },
      "OTP": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the OTP"
          },
          "user": {
            "type": "string",
            "description": "User ID reference"
          },
          "otp": {
            "type": "string",
            "description": "Hashed OTP value"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "description": "OTP expiration timestamp"
          }
        },
        "required": [
          "user",
          "otp",
          "expiresAt"
        ]
      },
      "PasswordResetToken": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the token"
          },
          "user": {
            "type": "string",
            "description": "User ID reference"
          },
          "token": {
            "type": "string",
            "description": "Hashed reset token"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "description": "Token expiration timestamp"
          }
        },
        "required": [
          "user",
          "token",
          "expiresAt"
        ]
      }
    }
  },
  "paths": {
    "/auth/signup": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register a new user",
        "description": "Creates a new user account with customer or vendor role",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "john@example.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "Password123"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "customer",
                      "vendor"
                    ],
                    "example": "customer"
                  }
                },
                "required": [
                  "name",
                  "email",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - User already exists or invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login user",
        "description": "Authenticates a user and returns user details with JWT token in cookie",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "john@example.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "Password123"
                  }
                },
                "required": [
                  "email",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Invalid credentials"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/verify-otp": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Verify OTP",
        "description": "Verifies the OTP sent to user's email",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string",
                    "example": "60d0fe4f5311236168a109ca"
                  },
                  "otp": {
                    "type": "string",
                    "example": "123456"
                  }
                },
                "required": [
                  "userId",
                  "otp"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired OTP"
          },
          "404": {
            "description": "User or OTP not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/resend-otp": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Resend OTP",
        "description": "Resends OTP to user's email",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "type": "string",
                    "example": "60d0fe4f5311236168a109ca"
                  }
                },
                "required": [
                  "user"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OTP sent successfully"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Forgot password",
        "description": "Sends password reset link to user's email",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "john@example.com"
                  }
                },
                "required": [
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset link sent successfully"
          },
          "404": {
            "description": "Email not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Reset password",
        "description": "Resets user password using token from email",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string",
                    "example": "60d0fe4f5311236168a109ca"
                  },
                  "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "NewPassword123"
                  }
                },
                "required": [
                  "userId",
                  "token",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password updated successfully"
          },
          "404": {
            "description": "Invalid or expired reset link"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout user",
        "description": "Logs out the user by clearing the JWT token cookie",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/check-auth": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Check authentication",
        "description": "Checks if the user is authenticated",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User is authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/users/vendors/all": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all vendors",
        "description": "Retrieves all vendors for admin approval (admin only)",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of vendors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Not an admin"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/users/vendors/approve/{id}": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Approve or reject vendor",
        "description": "Approves or rejects a vendor account (admin only)",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Vendor ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "isApproved": {
                    "type": "boolean",
                    "example": true
                  }
                },
                "required": [
                  "isApproved"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vendor status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - User is not a vendor"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Not an admin"
          },
          "404": {
            "description": "Vendor not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by ID",
        "description": "Retrieves user details by ID",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user",
        "description": "Updates user details",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "john@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get all products",
        "description": "Retrieves all products with optional filtering, sorting, and pagination",
        "parameters": [
          {
            "name": "brand",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by brand IDs"
          },
          {
            "name": "category",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by category IDs"
          },
          {
            "name": "user",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "If true, only returns non-deleted products"
          },
          {
            "name": "vendor",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by vendor ID"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Field to sort by"
          },
          {
            "name": "order",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "description": "Sort order (asc or desc)"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Page number for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Number of items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "List of products",
            "headers": {
              "X-Total-Count": {
                "schema": {
                  "type": "integer"
                },
                "description": "Total number of products matching the query"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Create product",
        "description": "Creates a new product (vendor or admin only)",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Smartphone X"
                  },
                  "description": {
                    "type": "string",
                    "example": "Latest smartphone with advanced features"
                  },
                  "price": {
                    "type": "number",
                    "example": 999.99
                  },
                  "discountPercentage": {
                    "type": "number",
                    "example": 10
                  },
                  "category": {
                    "type": "string",
                    "example": "60d0fe4f5311236168a109cb"
                  },
                  "brand": {
                    "type": "string",
                    "example": "60d0fe4f5311236168a109cc"
                  },
                  "stockQuantity": {
                    "type": "integer",
                    "example": 100
                  },
                  "thumbnail": {
                    "type": "string",
                    "example": "https://example.com/thumbnail.jpg"
                  },
                  "images": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "https://example.com/image1.jpg",
                      "https://example.com/image2.jpg"
                    ]
                  }
                },
                "required": [
                  "title",
                  "description",
                  "price",
                  "category",
                  "brand",
                  "stockQuantity",
                  "thumbnail",
                  "images"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Not a vendor or admin, or vendor not approved"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/products/vendor/my-products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get vendor's products",
        "description": "Retrieves all products belonging to the logged-in vendor",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of vendor's products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Not a vendor"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/products/{id}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get product by ID",
        "description": "Retrieves product details by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Product ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Product details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Product not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "patch": {
        "tags": [
          "Products"
        ],
        "summary": "Update product",
        "description": "Updates product details (vendor owner or admin only)",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Product ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "price": {
                    "type": "number"
                  },
                  "discountPercentage": {
                    "type": "number"
                  },
                  "category": {
                    "type": "string"
                  },
                  "brand": {
                    "type": "string"
                  },
                  "stockQuantity": {
                    "type": "integer"
                  },
                  "thumbnail": {
                    "type": "string"
                  },
                  "images": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Not the product owner or admin"
          },
          "404": {
            "description": "Product not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Delete product",
        "description": "Soft-deletes a product (vendor owner or admin only)",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Product ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Product deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Not the product owner or admin"
          },
          "404": {
            "description": "Product not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/products/undelete/{id}": {
      "patch": {
        "tags": [
          "Products"
        ],
        "summary": "Undelete product",
        "description": "Restores a soft-deleted product (vendor owner or admin only)",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Product ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Product restored successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Not the product owner or admin"
          },
          "404": {
            "description": "Product not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/cart": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Get user's cart",
        "description": "Retrieves the current user's shopping cart",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User's cart",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "Cart"
        ],
        "summary": "Add to cart",
        "description": "Adds a product to the user's cart",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "productId": {
                    "type": "string",
                    "example": "60d0fe4f5311236168a109cd"
                  },
                  "quantity": {
                    "type": "integer",
                    "example": 1
                  }
                },
                "required": [
                  "productId",
                  "quantity"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product added to cart",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid product or quantity"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Product not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Cart"
        ],
        "summary": "Clear cart",
        "description": "Removes all items from the user's cart",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Cart cleared successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/cart/{productId}": {
      "delete": {
        "tags": [
          "Cart"
        ],
        "summary": "Remove from cart",
        "description": "Removes a product from the user's cart",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Product ID to remove"
          }
        ],
        "responses": {
          "200": {
            "description": "Product removed from cart",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Product not found in cart"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "patch": {
        "tags": [
          "Cart"
        ],
        "summary": "Update cart item",
        "description": "Updates the quantity of a product in the cart",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Product ID to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "quantity": {
                    "type": "integer",
                    "example": 2
                  }
                },
                "required": [
                  "quantity"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cart item updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid quantity"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Product not found in cart"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get user's orders",
        "description": "Retrieves orders for the current user",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of orders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create order",
        "description": "Creates a new order from the user's cart",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "shippingAddress": {
                    "type": "string",
                    "example": "60d0fe4f5311236168a109ce"
                  }
                },
                "required": [
                  "shippingAddress"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Empty cart or invalid address"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/orders/{id}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get order by ID",
        "description": "Retrieves order details by ID",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Order ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Order details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Not the order owner or admin"
          },
          "404": {
            "description": "Order not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "patch": {
        "tags": [
          "Orders"
        ],
        "summary": "Update order status",
        "description": "Updates the status of an order (admin only)",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Order ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "pending",
                      "processing",
                      "shipped",
                      "delivered",
                      "cancelled"
                    ],
                    "example": "processing"
                  }
                },
                "required": [
                  "status"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order status updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid status"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Not an admin"
          },
          "404": {
            "description": "Order not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/orders/admin": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get all orders",
        "description": "Retrieves all orders (admin only)",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of all orders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Not an admin"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/wishlist": {
      "get": {
        "tags": [
          "Wishlist"
        ],
        "summary": "Get user's wishlist",
        "description": "Retrieves the current user's wishlist",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User's wishlist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "Wishlist"
        ],
        "summary": "Add to wishlist",
        "description": "Adds a product to the user's wishlist",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "productId": {
                    "type": "string",
                    "example": "60d0fe4f5311236168a109cd"
                  }
                },
                "required": [
                  "productId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product added to wishlist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Product not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/wishlist/{productId}": {
      "delete": {
        "tags": [
          "Wishlist"
        ],
        "summary": "Remove from wishlist",
        "description": "Removes a product from the user's wishlist",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Product ID to remove"
          }
        ],
        "responses": {
          "200": {
            "description": "Product removed from wishlist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Product not found in wishlist"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/address": {
      "get": {
        "tags": [
          "Address"
        ],
        "summary": "Get user's addresses",
        "description": "Retrieves all addresses for the current user",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of user's addresses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Address"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "Address"
        ],
        "summary": "Add address",
        "description": "Adds a new address for the user",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "street": {
                    "type": "string",
                    "example": "123 Main St"
                  },
                  "city": {
                    "type": "string",
                    "example": "New York"
                  },
                  "state": {
                    "type": "string",
                    "example": "NY"
                  },
                  "postalCode": {
                    "type": "string",
                    "example": "10001"
                  },
                  "country": {
                    "type": "string",
                    "example": "USA"
                  },
                  "phone": {
                    "type": "string",
                    "example": "123-456-7890"
                  },
                  "isDefault": {
                    "type": "boolean",
                    "example": false
                  }
                },
                "required": [
                  "name",
                  "street",
                  "city",
                  "state",
                  "postalCode",
                  "country",
                  "phone"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Address added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/address/{id}": {
      "get": {
        "tags": [
          "Address"
        ],
        "summary": "Get address by ID",
        "description": "Retrieves address details by ID",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Address ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Address details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Not the address owner"
          },
          "404": {
            "description": "Address not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "patch": {
        "tags": [
          "Address"
        ],
        "summary": "Update address",
        "description": "Updates an existing address",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Address ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "street": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "state": {
                    "type": "string"
                  },
                  "postalCode": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "isDefault": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Address updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Not the address owner"
          },
          "404": {
            "description": "Address not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Address"
        ],
        "summary": "Delete address",
        "description": "Deletes an address",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Address ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Address deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Not the address owner"
          },
          "404": {
            "description": "Address not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/reviews/{productId}": {
      "get": {
        "tags": [
          "Reviews"
        ],
        "summary": "Get product reviews",
        "description": "Retrieves all reviews for a product",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Product ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of reviews",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Review"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "Reviews"
        ],
        "summary": "Add review",
        "description": "Adds a review for a product",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Product ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "rating": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5,
                    "example": 5
                  },
                  "comment": {
                    "type": "string",
                    "example": "Great product, highly recommended!"
                  }
                },
                "required": [
                  "rating"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Review added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Review"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid rating"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Product not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get all categories",
        "description": "Retrieves all product categories",
        "responses": {
          "200": {
            "description": "List of categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Create category",
        "description": "Creates a new product category (admin only)",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Electronics"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Not an admin"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/brands": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Get all brands",
        "description": "Retrieves all product brands",
        "responses": {
          "200": {
            "description": "List of brands",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Brand"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "Brands"
        ],
        "summary": "Create brand",
        "description": "Creates a new product brand (admin only)",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Apple"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Brand created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Brand"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Not an admin"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  }
}